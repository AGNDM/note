{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u6b22\u8fce\u6765\u5230 AGNote","text":"<p>\u8fd9\u91cc\u662f\u4e2a\u4eba\u5b66\u4e60\u7b14\u8bb0\u4e0e\u77e5\u8bc6\u5e93\uff0c\u4f7f\u7528 Obsidian \u8bb0\u5f55\uff0c\u5e76\u901a\u8fc7 MkDocs + Material \u81ea\u52a8\u53d1\u5e03\u3002</p>"},{"location":"#_1","title":"\u5feb\u901f\u5bfc\u822a","text":"<p>\u60a8\u53ef\u4ee5\u4ece\u4ee5\u4e0b\u51e0\u4e2a\u4e3b\u8981\u5206\u7c7b\u5f00\u59cb\u63a2\u7d22\uff1a</p> <ul> <li>\u7b97\u6cd5\u5b66\u4e60 (Algorithm)</li> <li>\u4f18\u5316\u7406\u8bba\u4e0e\u7b97\u6cd5 (Optimization)</li> <li>\u65e5\u8bed\u5b66\u4e60 (\u65e5\u672c\u8a9e)</li> </ul> <p>Please star me if this helps!</p> <p>RRG Gaming  Our E-sports Club</p>"},{"location":"Algo/","title":"Index","text":"<p>Approximation Algorithm</p> <p>Dynamic Programming</p> <p>Review for 2024Spring Final</p>"},{"location":"Algo/Approximation%20Algorithm/","title":"Approximation Algorithm","text":"<p>![[approx_lec.pdf]]</p> <ul> <li> <p>Scheme and Algorithm</p> <ul> <li> <p>\\(n\\) is the scale of input</p> </li> <li> <p>the cost \\(C\\) we mentioned in the note in fact is more  similar to the meaning of value in maximization problems</p> </li> <li> <p>So when considering maximization, we want the value \\(C\\) to be as much as possible. In other words, we should minimize \\(\\frac {C_{opt}} C\\).</p> </li> <li> <p>Conversely, in minimization problems, we focus on \\(\\frac{C}{C_{opt}}\\).</p> </li> <li> <p>Furthermore, we can play around \\(\\omega(n)\\) using \\(\\epsilon\\). This becomes a scheme because the \\(\\epsilon\\) is an arbitrary number.</p> </li> </ul> </li> <li> <p>PTAS vs FPTAS(poly in both n and \\(\\frac{1}{\\epsilon}\\))</p> </li> <li> <p>Vertex Cover</p> <ul> <li> <p>Greedy: choose the one with the ==possible maximum== degree(good in practice bad in theory)</p> </li> <li> <p>Random: Simply taking random edges(u, v) and pick vertices u &amp; v</p> <ul> <li> <p>2-approx algo:</p> <ul> <li> <p>\\(A\\) = edges that are picked</p> </li> <li> <p>\\(C\\) = \\(2|A|\\) vertices are picked (that's where '2' comes from)</p> </li> <li> <p>No two edges in \\(A\\) share the same point and we have to cover every edges (at least half of the vertices) in \\(A\\) so  \\(C_{opt} &gt;= |A|\\) </p> </li> <li> <p>So \\(C &lt;= 2C_{opt}\\) </p> </li> </ul> </li> </ul> </li> </ul> </li> <li> <p>Set Cover</p> <ul> <li>Def Set \\(X\\) and subsets \\(S_i\\) , Minimizing # of subsets while covering the set \\(X\\) </li> <li> <p>Greedy: Always select the largest subset</p> <ul> <li> <p>a \\((\\ln{(n)} + 1)\\)-approx algo (whats the bound?)</p> </li> <li> <p>Assume \\(|C_{opt}| \\; = \\; t\\) \\(X_k\\;=\\;elements \\;in\\; iteration\\; k\\) . So for any \\(k\\) we can cover it using \\(t\\) sets. </p> <ul> <li> <p>One of them at least cover \\(\\frac{|X_k|}{t}\\) elements</p> </li> <li> <p>So the one we pick should be greater than \\(\\frac{|X_k|}{t}\\)</p> </li> <li> <p>So we have \\(\\(\\forall k,\\quad |X_{k+1}| \\le (1-\\frac{1}{t})|X_k|\\)\\)</p> </li> <li> <p>When \\(X_k\\; = \\; 0\\) we're done</p> </li> <li> <p>So inductively we have, $$         \\forall k,\\quad |X_k|\\le(1-\\frac{1}{t})^kn \\le\\,\\ldots some\\; math\\ldots\\le e^{-\\frac{k}{n}}n  $$</p> </li> </ul> </li> </ul> </li> </ul> </li> <li> <p>Partition</p> <ul> <li>Partition \\(A\\) and \\(B\\)</li> <li>Goal: maintain the balance as much as possible</li> </ul> \\[ 2L=sum\\;of\\;all\\;the\\;weights \\] <ul> <li> <p>optimal solution\\(\\ge L\\)</p> </li> <li> <p>Do a brute-force in the range of \\(m\\) </p> </li> <li> <p>Do the rest in an easier way</p> </li> <li> <p>In this case the cost \\(C\\) should be \\(\\omega(A)\\) (or \\(\\omega(B)\\)) and the \\(C_{opt}\\) is L. Thus, the ratio \\(\\rho(n)\\) is the upper bound on \\(\\frac{\\omega(A)}{L}\\).</p> </li> </ul> </li> </ul>"},{"location":"Algo/Dynamic%20Programming/","title":"Dynamic Programming","text":""},{"location":"Algo/Dynamic%20Programming/#how-to-find-a-dp-algorithm","title":"How to find a DP algorithm","text":"<ol> <li>Describe \\(f(x)\\) in words</li> <li>Find base cases and recursions and form this,</li> </ol> \\[ f(x) = \\begin{cases} \\text{base case}\\quad x=\\text{some special numbers} \\\\ \\text{something contains $f(m)$ where }m&lt;x \\end{cases} \\] <ol> <li>Memorization: Add a lookup table to recursive code so that future calls to \\(f\\) with the same arguments can return immediately So the final product is like,</li> </ol> \\[ f(x) = \\begin{cases} \\text{base case}\\quad &amp;x=\\text{some special numbers} \\\\ Memo[x]\\text{ in the memo}\\quad &amp;\\text{if it is computed before}\\\\ \\text{something contains $f(m)$ where }m&lt;x &amp;\\text{compute through recurtion} \\end{cases} \\]"},{"location":"Algo/Dynamic%20Programming/#shortest-path-example","title":"Shortest Path Example","text":"<p>We'll apply this principle to the shortest path problem</p> <ol> <li>\\(f(t)\\) by word</li> </ol> \\[     f(t) = \\text{the shortest path from s to t} \\] <ol> <li>\\(f(t)\\) with base case and recursion</li> </ol> \\[ f(t)= \\begin{cases} 0,\\quad &amp;if\\; t=s \\\\ \\infty,\\quad&amp;if\\,indegree(t)=0 \\\\ \\min_{e=(a,t)}  \\{weight(a,t)+f(a)\\}, &amp;otherwise \\end{cases} \\] <ol> <li>Memorization: if \\(f(t)\\) is called, save it to \\(Memo[t]\\)</li> </ol> \\[ f(t)= \\begin{cases} 0,\\quad &amp;if\\; t=s \\\\ \\infty,\\quad&amp;if\\,indegree(t)=0 \\\\ Memo[t], &amp;if\\,in\\,memo \\\\ \\min_{e=(a,t)}  \\{weight(a,t)+f(a)\\}, &amp;otherwise \\end{cases} \\] <p>This is a Top-Bottom algorithm and  we cannot deal with negative edges. If we do this bottom-up we'll get Bellman-Ford algorithm which can deal with negative edges.</p>"},{"location":"Algo/Dynamic%20Programming/#how-to-bottom-up","title":"How to bottom-up?","text":"<p>The essence of bottom-up lies in the way of memorization. In the top-down algo, we memorize in recursions. However, in bottom-up algo, we memorize first. In other words, the depth of recursion stack is at most 1.</p> <p>It's simple to get a bottom-up version. To bottom-up, we should start from s instead of t. For every edges going out from s (or \\(e\\in \\mathbb{E}\\) if there's negative edges), we apply \\(f(t)\\) to them.</p>"},{"location":"Algo/Dynamic%20Programming/#detect-negative-cycles","title":"Detect Negative Cycles","text":"<p>If negative cycles is reachable from \\(s\\), we use Bellman-Ford.</p> <p>If not (which means it's not a DAG), we create a virtual sink \\(s_v\\) and \\(\\forall v\\in \\mathbb{V}\\), we form an edge \\((s_{k},v)\\) with weight of 0. We turn it into a DAG without creating new possible negative cycles.</p>"},{"location":"Algo/Dynamic%20Programming/#weighted-interval-scheduling","title":"Weighted Interval Scheduling","text":"<p>![[Pasted image 20250617001849.png]]</p> <ul> <li> <p>Job \\(j_{1},j_{2},\\dots j_{n}\\) where \\(finish(j_{1})\\leq finishj_{2}\\leq\\dots\\leq finish(j_{n})\\)</p> </li> <li> <p>\\(p(j_i)=j_{k}\\) if \\(j_k\\) </p> <ul> <li>is the largest index of job which is incompatible with \\(j_i\\)</li> <li>\\(&lt;j_{i}\\)</li> </ul> </li> <li>Word def</li> </ul> \\[ \\begin{align}     f(x)=&amp;\\text{the maximum total weight of a set of mutually compatible jobs that can be selected from the first j jobs}\\\\     &amp;\\text{i.e., from the subset of jobs \\{1, 2, ..., j\\}} \\end{align} \\] <ol> <li>Recursion def</li> </ol> \\[ f(j)= \\begin{cases} 0,\\quad &amp;if\\;j=0 \\\\ \\max(f(j-1), f(p(j)))&amp;otherwise \\end{cases} \\] <ol> <li>Memorization</li> </ol> \\[ f(j)= \\begin{cases} 0,\\quad &amp;if\\;j=0 \\\\ Memo[j]&amp;if\\;in\\;memo \\\\ \\max(f(j-1), f(p(j)))&amp;otherwise \\end{cases} \\] <ol> <li>Bottom up: compute \\(Memo[1],Memo[2],\\dots,Memo[n]\\) one after another by transforming the formula in 3.</li> </ol>"},{"location":"Algo/Dynamic%20Programming/#knapsack-problem","title":"Knapsack Problem","text":"\\[ OPT(i,w)= \\begin{cases} 0,\\quad &amp; i=0 \\\\ OPT(i-1,w) &amp; w_{i}&gt;w \\\\ \\max\\{OPT(i-1,w), OPT(i-1,w-w_{i})\\}&amp;otherwise \\end{cases} \\]"},{"location":"Algo/Review/","title":"Review","text":""},{"location":"Algo/Review/#dp","title":"DP","text":""},{"location":"Algo/Review/#maxflow","title":"MaxFlow","text":"<ul> <li>\u5177\u4f53\u7b97\u6cd5\u5f88\u91cd\u8981\uff0c\u589e\u5e7f\u8def\u5f84</li> </ul>"},{"location":"Algo/Review/#np","title":"NP","text":"<ul> <li>Reduction</li> <li>NP P relation </li> <li>\u6982\u5ff5</li> <li>\u8bc1\u660e</li> </ul>"},{"location":"Algo/Review/#approximation-algorithm","title":"Approximation Algorithm","text":"<ul> <li>\u6982\u5ff5</li> <li>\u7ed9\u5230\u4e00\u4e2a\u8fd1\u4f3c\u7b97\u6cd5\uff0c\u662f\u4e0d\u662f\u8db3\u591f\u597d</li> </ul>"},{"location":"Algo/Review/#greedy","title":"Greedy","text":"<ul> <li>\u6700\u77ed\u8def\u5f84\u7b97\u6cd5 \u4e0d\u65ad\u4eces\u6269\u5f20</li> <li>MST<ul> <li>\u5272\u6027\u8d28\uff1a\u5272\u91cc\u9762\u6700\u5c0f\u7684\u8fb9\u4e00\u5b9a\u5728MST</li> <li>\u73af\u6027\u8d28\uff1a\u73af\u91cc\u9762\u6700\u5927\u7684\u8fb9\u4e00\u5b9a\u5728MST</li> </ul> </li> </ul>"},{"location":"Algo/Review/#divide-and-conquer","title":"Divide and Conquer","text":"<ul> <li>Mergesort</li> <li>\u7b97\u6570\u7684\u6280\u5de7\uff0c\u77e9\u9635\u4e58\u6cd5\u7b49\u7b49</li> </ul>"},{"location":"%E4%BC%98%E5%8C%96%E7%90%86%E8%AE%BA%E4%B8%8E%E7%AE%97%E6%B3%95/","title":"Index","text":"<p>LP1</p> <p>LP2</p> <p>LP3</p> <p>Matrix Calculus</p>"},{"location":"%E4%BC%98%E5%8C%96%E7%90%86%E8%AE%BA%E4%B8%8E%E7%AE%97%E6%B3%95/notes/Linear%20Programming%201/","title":"Linear Programming 1","text":""},{"location":"%E4%BC%98%E5%8C%96%E7%90%86%E8%AE%BA%E4%B8%8E%E7%AE%97%E6%B3%95/notes/Linear%20Programming%201/#_1","title":"\u6807\u51c6\u578b","text":"\\[ \\begin{align*}     &amp;minimize\\quad c^Tx \\\\     &amp;subject\\,to\\quad Ax=b \\\\     &amp;\\qquad \\qquad \\qquad x\\ge{0} \\end{align*} \\]"},{"location":"%E4%BC%98%E5%8C%96%E7%90%86%E8%AE%BA%E4%B8%8E%E7%AE%97%E6%B3%95/notes/Linear%20Programming%201/#_2","title":"\u591a\u9762\u4f53","text":"<p>$$     {x\\in \\mathbb{R}\\,|\\,Ax\\ge b} $$ \u7ebf\u6027\u89c4\u5212\u7684\u6807\u51c6\u578b\u53ef\u4ee5\u6539\u5199\u6210\u591a\u9762\u4f53\u7684\u5f62\u5f0f</p>"},{"location":"%E4%BC%98%E5%8C%96%E7%90%86%E8%AE%BA%E4%B8%8E%E7%AE%97%E6%B3%95/notes/Linear%20Programming%201/#_3","title":"\u6781\u503c\u70b9","text":"<p>![[lp_3\u51e0\u4f55\u6027\u8d28\u4ecb\u7ecd.pdf#page=9]]</p>"},{"location":"%E4%BC%98%E5%8C%96%E7%90%86%E8%AE%BA%E4%B8%8E%E7%AE%97%E6%B3%95/notes/Linear%20Programming%201/#_4","title":"\u57fa\u672c\u89e3","text":"<ol> <li>\\(Ax=b\\)</li> <li>\\(\\exists\\) \u7ebf\u6027\u72ec\u7acb\u7684\u5217\u5411\u91cf\u7ec4</li> </ol> <p>\u53ea\u548c\u7ea6\u675f\u6709\u5173     \u6c42\u89e3\u65f6\u76f4\u63a5\u5c06\u7ebf\u6027\u76f8\u5173\u7684\\(x_i\\)\u4ee4\u4e3a0\u540e\u6c42\u89e3\\(Ax=b\\)</p>"},{"location":"%E4%BC%98%E5%8C%96%E7%90%86%E8%AE%BA%E4%B8%8E%E7%AE%97%E6%B3%95/notes/Linear%20Programming%201/#_5","title":"\u57fa\u672c\u53ef\u884c\u89e3","text":"<ol> <li>\u662f\u57fa\u672c\u89e3</li> <li>\\(x\\ge0\\)</li> </ol> <p>\u6781\u503c\u70b9 \\(\\Leftrightarrow\\) \u57fa\u672c\u53ef\u884c\u89e3</p> <p>\u5bf9\u4e8e\u5b58\u5728\u6700\u4f18\u89e3\u7684LP\u95ee\u9898\uff0c\u5bfb\u627e\u6700\u4f18\u89e3\u5b9e\u9645\u4e0a\u5c31\u662f\u5728\u627e\u57fa\u672c\u53ef\u884c\u89e3\u4e2d\u6700\u597d\u7684</p>"},{"location":"%E4%BC%98%E5%8C%96%E7%90%86%E8%AE%BA%E4%B8%8E%E7%AE%97%E6%B3%95/notes/Linear%20Programming%202/","title":"Linear Programming 2","text":""},{"location":"%E4%BC%98%E5%8C%96%E7%90%86%E8%AE%BA%E4%B8%8E%E7%AE%97%E6%B3%95/notes/Linear%20Programming%202/#simplex-method","title":"Simplex method","text":""},{"location":"%E4%BC%98%E5%8C%96%E7%90%86%E8%AE%BA%E4%B8%8E%E7%AE%97%E6%B3%95/notes/Linear%20Programming%202/#_1","title":"\u89c4\u8303\u578b","text":"<ol> <li>\u76ee\u6807\u51fd\u6570\u548c\u57fa\u53d8\u91cf\u65e0\u5173</li> <li>\u57fa\u77e9\u9635\u662f\u5355\u4f4d\u77e9\u9635</li> </ol>"},{"location":"%E4%BC%98%E5%8C%96%E7%90%86%E8%AE%BA%E4%B8%8E%E7%AE%97%E6%B3%95/notes/Linear%20Programming%202/#_2","title":"\u5982\u4f55\u83b7\u53d6\uff1f","text":"Base \\(c^T\\) \\(balance = 0\\) \\(A^T\\) \\(b\\) <p>Turn \\(A^T = (A_{B}\\; A_{N})\\) into </p> \\[ \\begin{pmatrix}  I\\;A' \\end{pmatrix} = A_{B}^{-1}A \\] <p>Note that \\(A_B^{-1}\\) is \\(m\\times m\\) and \\(A\\) is \\(m\\times n\\).</p> Base \\(c^T\\) \\(balance = 0\\) \\(A_{\u89c4\u8303\u578b}=A_{B}^{-1}A^T\\) \\(A_{B}^{-1}b\\) Base \\(c_{{\u89c4\u8303\u578b}}=c^T - c_{B}^TA_{\u89c4\u8303\u578b}\\) \\(balance = -c_{B}^TA_{\u89c4\u8303\u578b}\\) \\(A_{\u89c4\u8303\u578b}=A_{B}^{-1}A^T\\) \\(A_{B}^{-1}b\\)"},{"location":"%E4%BC%98%E5%8C%96%E7%90%86%E8%AE%BA%E4%B8%8E%E7%AE%97%E6%B3%95/notes/Linear%20Programming%202/#_3","title":"\u68c0\u9a8c\u6700\u4f18","text":"<p>\u5982\u679c\\(c_{\u89c4\u8303\u578b}\\)\u4e2d\u5168\u90fd\u662f\u6b63\u7684\uff0c\u90a3\u4e48\u5c31\u5df2\u7ecf\u6700\u4f18\u4e86\uff0c\u56e0\u4e3a\u6ca1\u6709\u51cf\u5c0f\u7684\u7a7a\u95f4\u4e86</p>"},{"location":"%E4%BC%98%E5%8C%96%E7%90%86%E8%AE%BA%E4%B8%8E%E7%AE%97%E6%B3%95/notes/Linear%20Programming%202/#_4","title":"\u53d8\u6362\u57fa","text":"<p>\\(\\exists c_{i}&lt;0\\)\uff0c\u9700\u8981\u53d8\u6362\u57fa</p> <p>\u6211\u4eec\u5047\u8bbe\u9700\u8981\u7528\\(x_i\\)\u628a\\(x_j\\)\u6362\u6389\uff0c\u90a3\u4e48\u6211\u4eec\u8003\u8651\\(x_j\\)\u7684\u4e00\u4e9b\u6027\u8d28\uff1a 1. \\(x_j=b_{k}\\)\uff0c \\(k\\)\u662f\\(x_j\\)\u4f5c\u4e3a\u57fa\u7684\u90a3\u4e00\u884c 2. \u9664\u4e86\u7b2c\\(k\\)\u884c\uff0c\u5176\u4ed6\u884c\u90fd\u6ca1\u6709\\(x_j\\)\u7684\u51fa\u73b0\uff0c\u8fd9\u662f\u7531\u89c4\u8303\u578b\u6240\u4fdd\u8bc1\u7684 3. \u6211\u4eec\u5355\u72ec\u8003\u5bdf\u7b2c\\(k\\)\u884c\uff0c\u4e5f\u5c31\u662f\u7b2c\\(k\\)\u4e2a\u7b49\u5f0f\uff1a     1. \u8fd9\u4e2a\u7b49\u5f0f\u4e2d\uff0c\\(x_j\\)\u662f\u552f\u4e00\u4e00\u4e2a\u7cfb\u6570\u4e0d\u4e3a0\u4e14\u672c\u8eab\u4e0d\u4e3a0\u7684\u6570     2. \\(x_i\\)\u7684\u7cfb\u6570\u975e\u96f6</p> <p>\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u8981\u4f7f\u7b2c\\(k\\)\u884c\u7ee7\u7eed\u6210\u7acb\uff0c\u6211\u4eec\u5fc5\u987b\u8981\u4fdd\u8bc1</p> \\[     A_{ki}x_{i}+A_{kj}x_{j}=b_{k} \\] <p>\u5f88\u7b80\u5355\u5730\uff0c\u6211\u4eec\u8003\u8651\u53ea\u6709\u4e00\u4e2a\u7ea6\u675f\u548c\u4e24\u4e2a\u53d8\u91cf\u7684\u4f8b\u5b50\uff1a</p> \\[     ax_{1}+bx_{2}=c \\] \\[ \\begin{align*}     x_{1},x_{2} \\ge 0\\\\ \\end{align*} \\] <p>\u9996\u5148\u5728\u89c4\u8303\u578b\u4e2d\\(b=1\\)\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u5728\u8fd9\u91cc\u5047\u8bbe\\(b&gt;0\\)</p> <p>\u5176\u6b21\uff0c\u7531\u4e8e\u5728\u53d8\u6362\u524d\uff0c\\(x_{2} = \\frac{c}{b} \\ge 0\\)\u6240\u4ee5\u6211\u4eec\u6709\\(c \\ge 0\\)\uff0c</p> <p>\u6211\u4eec\u8981\u7528\\(x_{1}\\)\u66ff\u6362\\(x_{2}\\)</p> <p>\u5982\u679c\\(a&gt;0\\)\uff0c\u90a3\u4e48</p> \\[ \\begin{align*} \\max x_{1}=\\frac{1}{a}(c-bx_{2})&amp;=\\frac{c}{a}\\\\     x_{2}&amp;=0\\text{ \u65f6\u53d6\u5230} \\end{align*} \\] <p>\u5982\u679c\\(a&lt;0\\)\uff0c\u90a3\u4e48</p> \\[ \\begin{align*} \\max x_{1}=\\frac{1}{-a}(bx_{2}-c)&amp;= \\infty\\text{ \u65e0\u754c}\\\\ x_{2}&amp;=\\infty\\text{ \u65f6\u53d6\u5230} \\end{align*} \\] <p>\u56de\u5230\u539f\u672c\u7684\u95ee\u9898\uff0c\u5c06\\(A_{kj} = 1\\)(\u89c4\u8303\u578b)\u5e26\u5165\uff0c</p> \\[     x_{i} = \\frac{b_{k}-x_{j}}{A_{ki}} \\] <p>\\(x_{j}\\)\u662f\u6211\u4eec\u552f\u4e00\u53ef\u4ee5\u6539\u53d8\u7684\uff0c\u6211\u4eec\u5e0c\u671b\u628a\u5b83\u53d8\u5316\u52300\u6765\u8ba9\\(x_i\\)\u53d6\u5230\u6700\u5927\uff0c\u4ece\u800c\u4f7f\u76ee\u6807\u51fd\u6570\u6700\u5c0f \u5728\u53d8\u6362\u524d\uff0c\u6211\u4eec\u6709</p> \\[     x_{j} = b_{k} &gt; 0 \\] <p>\u90a3\u4e48\u6709\u4e24\u79cd\u53d6\u6cd5, - \u4e00\u79cd\u662f\u5f53\\(A_{ki}&gt;0\\)\uff0c\u6211\u4eec\u8ba9\\(x_j=0\\)\u53d6\u5230\u6700\u5927\u503c\\(\\frac{b_{k}}{A_{ki}}\\)\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u53ef\u4ee5\u5728\\(x_i\\)\u4e0a\u8d70\u7684\u6700\u5927\u6b65\u957f - \u53e6\u4e00\u79cd\u662f\u5f53\\(A_{ki}&lt;0\\)\uff0c\u6211\u4eec\u8ba9\\(x_j=\\infty\\)\u4ece\u800c\u4f7f\u76ee\u6807\u51fd\u6570\u65e0\u754c</p> <p>\u8fd9\u4e24\u79cd\u60c5\u51b5\u4e0e\u4e4b\u524d\u7684\u4f8b\u5b50\u4e00\u4e00\u5bf9\u5e94</p> <p>\u6211\u4eec\u7684\u6700\u5c0f\u6bd4\u503c\u6cd5\u5c31\u662f\u5c06\u7b2c\u4e00\u79cd\u60c5\u51b5\u5bf9\u6bcf\u4e00\u4e2a\u7b49\u5f0f\u8fdb\u884c\u68c0\u67e5\uff0c\u53d6\u51fa\u6700\u4fdd\u5b88\u7684\u90a3\u4e00\u79cd\u53ef\u80fd</p> <p>\u5947\u5999\u7684\u662f\uff0c\u7531\u4e8e\u5355\u7eaf\u578b\u8868\u5e76\u4e0d\u4f1a\u8bb0\u5f55\\(x\\)\u7684\u53d6\u503c\uff0c\u6240\u4ee5\u5176\u5b9e\u6211\u4eec\u7684\u6362\u57fa\u64cd\u4f5c\u4e2d\u5bf9\\(x_i,x_j\\)\u7684\u6539\u53d8\u672c\u8d28\u4e0a\u5e76\u4e0d\u4f1a\u5728\u5355\u7eaf\u578b\u8868\u4e2d\u6709\u6240\u8bb0\u5f55\uff0c\u6211\u4eec\u53ea\u662f\u5728\u505aLP\u95ee\u9898\u7684\u7b49\u4ef7\u53d8\u5f62\u3002</p> <p>\u5f53\u6211\u4eec\u628a\u65b0\u7684\u57fa\u53d8\u91cf\u7684\u7cfb\u6570\u53d8\u4e3a1\u65f6\uff0c\u81ea\u7136\u800c\u7136\u5730\u5c31\u4f1a\u6709\u5728\u7b2c\\(k\\)\u884c\uff0c\\(x_{i}=b_{k}\\)</p>"},{"location":"%E4%BC%98%E5%8C%96%E7%90%86%E8%AE%BA%E4%B8%8E%E7%AE%97%E6%B3%95/notes/Linear%20Programming%202/#_5","title":"\u6700\u7ec8\u7684\u51fd\u6570\u503c","text":"<p>\u4e3a\u4ec0\u4e48\u6700\u7ec8\u7684\u51fd\u6570\u503c\u5c31\u662f\u8868\u4e2d\u7684\\(-balance\\) \u6211\u4eec\u7528\u7ea6\u675f\u4e2d\u7684\u884c\u5c06\u76ee\u6807\u51fd\u6570\u884c\u8fdb\u884c\u9ad8\u65af\u6d88\u5143\u672c\u8d28\u4e0a\u662f\u7528\u786e\u5b9a\u6027\u53bb\u66ff\u4ee3\u4e0d\u786e\u5b9a\u6027\u3002\u5176\u903b\u8f91\u662f\uff1a</p> \\[ \\min c^Tx \\rightarrow \\min c^Tx-b_{k} \\rightarrow \\min c^Tx-A_{k}^Tx \\quad where\\;A_{k}^Tx=b_{k} \\] <p>\u5176\u786e\u5b9a\u6027\u7684\u90e8\u5206\\(b_k\\)\u81ea\u7136\u800c\u7136\u5730\u88ab\u6211\u4eec\u4ee5\u76f8\u53cd\u6570\u7684\u5f62\u5f0f\u8bb0\u5f55\u5728\u4e86\\(balance\\)\u91cc\uff0c\u800c\u8868\u4e2d\u7684\u76ee\u6807\u51fd\u6570\u5757\uff08\u4e0d\u786e\u5b9a\u7684\u90e8\u5206\uff09\u88ab\u6211\u4eec\u7ef4\u62a4\u7740\u59cb\u7ec8\u53d6\u6700\u5c0f\u503c\u4e5f\u5c31\u662f0\uff08\u901a\u8fc7\u5bf9\\(x\\)\u7684\u8d4b\u503c\uff09\uff0c\u76f4\u5230\u6211\u4eec\u53d1\u73b0\u6ca1\u6709\u53ef\u4ee5\u4f18\u5316\u7684\u53ef\u80fd\u4e86\uff08\u76ee\u6807\u51fd\u6570\u4e2d\u6d17\u6f31\u5427\u5168\u662f\u6b63\u7684\uff09\u3002\u6b64\u65f6\u4e0d\u786e\u5b9a\u7684\u90e8\u5206\u4e3a0\uff0c\u786e\u5b9a\u7684\u90e8\u5206\u4e3a\\(-balance\\)\uff0c\u76f8\u52a0\u5373\u4e3a\u6700\u5c0f\u503c</p>"},{"location":"%E4%BC%98%E5%8C%96%E7%90%86%E8%AE%BA%E4%B8%8E%E7%AE%97%E6%B3%95/notes/Linear%20Programming%202/#_6","title":"\u68c0\u9a8c\u6570","text":"\\[     c^T-(\u67d0\u4e9b\u9ad8\u65af\u6d88\u5143) \\] <p>\u4e5f\u5c31\u662f\u5355\u7eaf\u578b\u8868\u7684\u7b2c\u4e00\u884c\u7b2c\u4e8c\u5217\u4e2d\u7684\u8bf8\u591a\u503c \u68c0\u9a8c\u6570\u53ef\u4ee5\u8868\u793a\u5f53\u524d\u7684\u975e\u57fa\u53d8\u91cf\u5bf9\u51fd\u6570\u503c\u7684\u5f71\u54cd</p> \u00b1\\abs \u5927 \u5c0f \u6b63 \u53d8\u5927\u5f88\u591a \u53d8\u5927\u8f83\u5c0f \u8d1f \u53d8\u5c0f\u5f88\u591a \u53d8\u5c0f\u8f83\u5c0f <p>\u68c0\u9a8c\u6570\u53ef\u4ee5\u6307\u5bfc\u6211\u4eec\u52a0\u5165\u65b0\u57fa\u66ff\u6362\u65e7\u7684</p>"},{"location":"%E4%BC%98%E5%8C%96%E7%90%86%E8%AE%BA%E4%B8%8E%E7%AE%97%E6%B3%95/notes/Linear%20Programming%203/","title":"Linear Programming 3","text":""},{"location":"%E4%BC%98%E5%8C%96%E7%90%86%E8%AE%BA%E4%B8%8E%E7%AE%97%E6%B3%95/notes/Linear%20Programming%203/#_1","title":"\u5982\u4f55\u5bfb\u627e\u521d\u59cb\u57fa\u672c\u53ef\u884c\u89e3","text":""},{"location":"%E4%BC%98%E5%8C%96%E7%90%86%E8%AE%BA%E4%B8%8E%E7%AE%97%E6%B3%95/notes/Linear%20Programming%203/#_2","title":"\u4e24\u9636\u6bb5\u6cd5","text":"<p>\u5bf9\u4e8e\u539f\u95ee\u9898</p> \\[ \\begin{align*}     minimize_{x}\\quad c^Tx&amp;\\\\     subject\\;to\\quad Ax&amp;=b\\\\     x &amp;\\ge 0 \\end{align*} \\] <p>\u4f7f\u7528\u8f85\u52a9\u95ee\u9898</p> \\[ \\begin{align*}     minimize_{x,y}\\quad e^Ty&amp;\\\\     subject\\;to\\quad Ax+y&amp;=b \\\\     x,y&amp;\\ge 0 \\\\     \\\\     where\\quad e =  \\begin{pmatrix} 1 \\\\ 1 \\\\ \\vdots \\\\ 1 \\end{pmatrix}    \\end{align*} \\] <p>\u4e0d\u59a8\u5047\u8bbe\\(b \\ge 0\\)\uff0c\u8fd9\u4e2a\u95ee\u9898\u6709\u57fa\u672c\u53ef\u884c\u89e3</p> \\[ X^*= \\begin{cases}      x=0\\\\      y=b \\ge 0 \\end{cases} \\] <p>\u4ece\\(X^*\\)\u5f00\u59cb\uff0c\u6211\u4eec\u8fdb\u884c\u5355\u7eaf\u5f62\u6cd5\u6c42\u89e3     1. \u5982\u679c\u6700\u7ec8\u7684\u6700\u4f18\u503c\u4e0d\u4e3a0\uff0c\u5219\u539f\u95ee\u9898\u4e0d\u53ef\u884c     2. \u5426\u5219\uff0c\\(X^*\\)\u5c31\u662f\u539f\u95ee\u9898\u7684\u4e00\u4e2a\u521d\u59cb\u53ef\u884c\u89e3</p> <p>\u4f7f\u7528\u8fd9\u4e00\u65b9\u6cd5\u9700\u8981\u6ce8\u610f\u6784\u9020\u65f6\u8981\u4f7f\\(b \\ge 0\\)\u5e76\u5316\u6210\u89c4\u8303\u578b</p>"},{"location":"%E4%BC%98%E5%8C%96%E7%90%86%E8%AE%BA%E4%B8%8E%E7%AE%97%E6%B3%95/notes/Linear%20Programming%203/#m","title":"\u5927M\u6cd5","text":"<p>\u6838\u5fc3\u601d\u60f3\u662f\u7528\u4e00\u4e2a\u5f88\u5927\u7684\u60e9\u7f5aM\u6765\u8fbe\u5230\u4e24\u9636\u6bb5\u6cd5\u7684\u7b2c\u4e00\u9636\u6bb5\uff0c\u7136\u540e\u81ea\u7136\u800c\u7136\u8f6c\u5411\u7b2c\u4e8c\u9636\u6bb5 \u6784\u9020\u8f85\u52a9\u95ee\u9898</p> \\[ \\begin{align*}     minimize_{x}\\quad c^Tx+M&amp; \\sum_{i=1}^m y_{i}\\\\     subject\\;to\\quad Ax+y&amp;=b\\\\     x,y &amp;\\ge 0 \\end{align*} \\] <p>\u8fd9\u4e2a\u95ee\u9898\u6709\u521d\u59cb\u53ef\u884c\u89e3</p> \\[ X_{init}= \\begin{cases} x=0 \\\\ y=b \\end{cases} \\]"},{"location":"%E4%BC%98%E5%8C%96%E7%90%86%E8%AE%BA%E4%B8%8E%E7%AE%97%E6%B3%95/notes/Linear%20Programming%203/#_3","title":"\u5e03\u5170\u5fb7\u6cd5\u5219","text":"<p>\u59cb\u7ec8\u9009\u62e9\u4e0b\u6807\u6700\u5c0f\u7684\u90a3\u4e2a\u5165\u57fa/\u51fa\u57fa\uff0c\u5c31\u4e0d\u4f1a\u51fa\u73b0\u5faa\u73af \u8bc1\u660e\u89c1\\(Bertsimas \\S 3.4\\)</p>"},{"location":"%E4%BC%98%E5%8C%96%E7%90%86%E8%AE%BA%E4%B8%8E%E7%AE%97%E6%B3%95/notes/Linear%20Programming%203/#_4","title":"\u590d\u6742\u5ea6","text":"<p>\u6ca1\u770b\u61c2\uff0c\u4f3c\u4e4e\u4e0d\u662f\u5f88\u590d\u6742</p>"},{"location":"%E4%BC%98%E5%8C%96%E7%90%86%E8%AE%BA%E4%B8%8E%E7%AE%97%E6%B3%95/notes/Matrix%20Calculus/","title":"Matrix Calculus","text":""},{"location":"%E4%BC%98%E5%8C%96%E7%90%86%E8%AE%BA%E4%B8%8E%E7%AE%97%E6%B3%95/notes/Matrix%20Calculus/#gradient","title":"Gradient","text":"\\[ (\\nabla_{A}f(A)))_{ij} =  \\frac{{\\partial f(A)}}{\\partial A_{ij}} \\]"},{"location":"%E4%BC%98%E5%8C%96%E7%90%86%E8%AE%BA%E4%B8%8E%E7%AE%97%E6%B3%95/notes/Matrix%20Calculus/#hessian","title":"Hessian","text":"\\[ \\nabla^2_{x}f(x)\\in\\mathbb{R}^{n\\times n}= \\begin{bmatrix}  \\nabla_{x}(\\nabla_{x}f(x))_1\\dots\\nabla_{x}(\\nabla_{x}f(x))_{n} \\end{bmatrix} \\]"},{"location":"%E4%BC%98%E5%8C%96%E7%90%86%E8%AE%BA%E4%B8%8E%E7%AE%97%E6%B3%95/notes/Matrix%20Calculus/#quadratic","title":"Quadratic","text":"\\[ \\begin{align*} \\nabla_{x}b^Tx&amp;=b\\\\ \\nabla_{x}x^TAx&amp;=2Ax(\\text{if A symmetric})\\\\ \\nabla_{x}^2x^TAx&amp;=2A(\\text{if A symmetric}) \\end{align*} \\]"},{"location":"%E4%BC%98%E5%8C%96%E7%90%86%E8%AE%BA%E4%B8%8E%E7%AE%97%E6%B3%95/notes/Matrix%20Calculus/#determinant","title":"Determinant","text":"\\[ \\nabla_A |A| = (\\text{adj}(A))^T = |A|A^{-T} \\] <p>It is worth mentioning that here our input is a \\(m\\times n\\) matrix so the result is also a \\(m\\times n\\) matrix instead of a \\((m+n)\\times 1\\) one.</p>"},{"location":"%E6%97%A5%E6%9C%AC%E8%AA%9E/","title":"Index","text":"<p>\u65e5\u8bed\u590d\u4e60</p>"},{"location":"%E6%97%A5%E6%9C%AC%E8%AA%9E/%E6%97%A5%E8%AF%AD%E5%A4%8D%E4%B9%A0/","title":"\u7b2c\u4e00\u8bfe","text":""},{"location":"%E6%97%A5%E6%9C%AC%E8%AA%9E/%E6%97%A5%E8%AF%AD%E5%A4%8D%E4%B9%A0/#_2","title":"\u5358\u8a9e","text":"<p>\u5173\u4e8e\u957f\u97f3\uff1a\u540e\u9f3b\u97f3\u548c\u5143\u97f3\u8f83\u591a\u7684\u6c49\u5b57\u5927\u591a\u4f1a\u662f\u957f\u97f3</p> Jap Chi \u4f1a\u793e\u54e1\uff08\u304b\u3044\u3057\u3083\u3044\u3093\uff09 \u516c\u53f8\u804c\u5458 \u8cb4\u65b9\uff08\u3042\u306a\u305f\uff09 \u4f60 \u9280\u884c\u54e1\uff08\u304e\u3093\u3053\u3046\u3044\u3093\uff09 \u533b\u8005\uff08\u3044\u3057\u3083\uff09 \u3042\u306e\u65b9\uff08\u3042\u306e\u304b\u305f\uff09 \u90a3\u4f4d \u3069\u306a\u305f\u30fb\u3060\u308c\uff08\u8ab0\uff09 \u5927\u5b66\uff08\u3060\u3044\u304c\u304f\uff09 \u5148\u751f\uff08\u305b\u3093\u305b\u3044\uff09 \uff5e\u3061\u3083\u3093 \u4f55\u6b73 \u304d\u3085\u3046 \uff19 \u30a2\u30e1\u30ea\u30ab \u7f8e\u56fd \uff5e\u304b\u3089\u6765\u307e\u3057\u305f\uff08\u6765\uff1a\u304d\uff09 \u4ece~\u6765\u7684 \u4e2d\u56fd\uff08\u3061\u3085==\u3046==\u3054\u304f\uff09 \u6559\u5e2b\uff08\u304d\u3087\u3046\u3057\uff09 \u3042\u306e\u4eba\uff08\u3042\u306e\u3072\u3068\uff09 \u90a3\u4e2a\u4eba \u793e\u54e1\uff08\u3057\u3083\u3044\u3093\uff09 \u304a\u3044\u304f\u3064 \u51e0\u5c81 \u30a4\u30ae\u30ea\u30b9 \u82f1\u56fd \u30c9\u30a4\u30c4 \u5fb7\u56fd \u75c5\u9662\uff08\u3073\u3087\u3046\u3044\u3093\uff09 \u30a4\u30f3\u30c9 \u5370\u5ea6 \u97d3\u56fd\uff08\u304b\u3093==\u3053==\u304f\uff09 \u540d\u524d\uff08\u306a\u307e\u3048\uff09 ## \u6587\u6cd5 <ul> <li>\u306f<ol> <li>\u63d0\u793a\u8bdd\u9898<ul> <li>\u6620\u753b\u306f\u3000\u4f55\u6642\u304b\u3089\u3000\u3067\u3059\u304b</li> </ul> </li> <li>\u52a0\u5f3a\u5426\u5b9a<ul> <li>\uff5e\u3067\u306f\u3000\u3042\u308a\u307e\u305b\u3093</li> </ul> </li> </ol> </li> <li>\u3067\u3059<ol> <li>\u5224\u65ad\u53e5<ul> <li>\u79c1\u306f\u3000\u4f1a\u793e\u54e1\u3067\u3059</li> </ul> </li> </ol> </li> <li>\u3067\u306f\u3000\u3042\u3043\u307e\u305b\u3093</li> <li>\u3058\u3083\u3000\u3042\u308a\u307e\u305b\u3093</li> <li>\u3067\u3059\u304b</li> <li>\u306e\u3000\u8868\u793a\u6240\u5c5e</li> <li>\u3082\u3000\u5305\u3055\u3093\u3082\u3000\u4e2d\u56fd\u4eba\u3067\u3059</li> </ul>"},{"location":"%E6%97%A5%E6%9C%AC%E8%AA%9E/%E6%97%A5%E8%AF%AD%E5%A4%8D%E4%B9%A0/#_3","title":"\u7b2c\u4e8c\u8bfe","text":""},{"location":"%E6%97%A5%E6%9C%AC%E8%AA%9E/%E6%97%A5%E8%AF%AD%E5%A4%8D%E4%B9%A0/#_4","title":"\u5358\u8a9e","text":"Jap Chi \u8f9e\u66f8\uff08\u3058\u3057\u3087\uff09 \u5098\uff08\u304b\u3055\uff09 \u30dc\u30fc\u30eb\u30da\u30f3 \u30ce\u30fc\u30c8 \u540d\u523a\uff08\u3081\u3044==\u3057==\uff09 \u96d1\u8a8c\uff08\u3056\u3063\u3057\uff09 \u30b3\u30f3\u30d7\u30fc\u30bf\u30fc \u9784\uff08\u304b\u3070\u3093\uff09 \u9375\uff08\u304b\u304e\uff09 \u65b0\u805e\uff08\u3057\u3093\u3076\u3093\uff09 \u8eca\uff08\u304f\u308b\u307e\uff09 \u672c \u30c6\u30ec\u30d3 \u7535\u89c6 \u6642\u8a08\uff08\u3068\u3051\u3044\uff09 \u30ab\u30e1\u30e9 \u76f8\u673a \u925b\u7b46\uff08\u3048\u3093\u3074\u3064\uff09 \u6905\u5b50 \u30b7\u30fc\u30c7\u30a3\u30fc \u304a\u571f\u7523\uff08\u304a\u307f\u3084\u3052\uff09 \u30c1==\u30e7==\u30b3\u30ec\u30fc\u30c8 ==\u9055==\u3044\u307e\u3059 \u673a\uff08\u3064\u304f\u3048\uff09 ## \u6587\u6cd5 <p>-\u3000\u3053\u305d\u3042\u3069     - \uff5e\u308c\u3000\u4e8b\u7269\u6307\u4ee3         - \u3053\u308c\u306f\u3000\u672c\u3067\u3059\u3002         - \u5148\u751f\u306e\u9784\u306f\u3069\u308c\u3067\u3059\u304b\u3002     - \uff5e\u306e\u3000\u6307\u793a\u8fde\u4f53 \u540e\u9762\u8981\u52a0\u4e2a\u4e1c\u897f     - \uff5e\u3061\u3089\u3000\u65b9\u4f4d     - \uff5e\u3053\u3000\u573a\u6240\u6307\u793a\u8bcd\u3000\u3042\u305d\u3053\u7279\u6b8a\u62fc\u6cd5 - \u305d\u3046\u3067\u3059 - \uff5e\u306f\u3000\uff21\u3067\u3059\u304b\u3001\u3000\uff22\u3067\u3059\u304b - \uff5e\u306e\uff5e \u540d\u8bcd\u4fee\u9970\u540d\u8bcd     - \u3053\u308c\u306f\u3000\u79c1\u306e\u672c\u3067\u3059\u3002 - \u306e\u4ee3\u66ff\u540d\u8bcd\u4f7f\u7528     - \u3053\u308c\u308f\u79c1\u306e\u3067\u3059 - \u305d\u3046\u3067\u3059\u304b - A\u306f\u3000\u4f55\u3067\u3059\u304b     - \u8fd9\u91cc\u7684\u4f55\u4e5f\u53ef\u4ee5\u53d8\u4e3a\u3069\u308c\uff08\u8fd9\u662f\u3053\u305d\u3042\u3069\u4f53\u7cfb\u91cc\u7684\u3069\uff09\u30fb\u3060\u308c\uff08\u8ab0\uff09\u30fb\u3069\u306a\u305f - \u3053\u308c\u306f\u3000\u8ab0\u306e\uff5e\u3000\u3067\u3059\u304b - \u3053\u306e\u3000X\u3000\u306f\u3000\u8ab0\u306e\uff08X\uff09\u3067\u3059\u304b - \u305d\u308c\u306f \u79c1\u306e\u3000\u3067\u3059\u3002</p>"},{"location":"%E6%97%A5%E6%9C%AC%E8%AA%9E/%E6%97%A5%E8%AF%AD%E5%A4%8D%E4%B9%A0/#_5","title":"\u7b2c\u4e09\u8bfe","text":""},{"location":"%E6%97%A5%E6%9C%AC%E8%AA%9E/%E6%97%A5%E8%AF%AD%E5%A4%8D%E4%B9%A0/#_6","title":"\u5358\u8a9e","text":"Jap Chi \u98df\u5802\uff08\u3057\u3087\u304f\u3069\u3046\uff09 \u30a8\u30b9\u30ab\u30ec\u30fc\u30bf\u30fc \u30c8\u30a4\u30ec \u304a\u624b\u6d17\u3044 \u4f1a==\u8b70==\u5ba4\uff08\u304b\u3044\u304e\u3057\u3064\uff09 \u4e8b==\u52d9==\u6240\uff08\u3058\u3080\u3057\u3087\uff09 \u304a\u56fd\uff08\u304a\u304f\u306b\uff09 \u9774\uff08\u304f\u3064\uff09 \u30a4\u30bf\u30ea\u30a2 \u610f\u5927\u5229 \u3044\u304f\u3089 \u305b\u3093 \u307e\u3093 \u3072\u3083\u304f \u3053\u308c\u3092\u4e0b\u3055\u3044\uff08\u3053\u308c\u3092\u304f\u3060\u3055\u3044\uff09 \u3069\u3046\u3082 \u30ef\u30a4\u30f3 \u5730\u4e0b\uff08\u3061\u304b\uff09 \uff5e\u968e \u304a\u898b\u305b\u3066\u304f\u3060\u3055\u3044 \u6559\u5ba4\uff08\u304d\u3087\u3046\u3057\u3064\uff09 \u53d7\u4ed8\uff08\u3046\u3051\u3064\u3051\uff09 \u81ea\u52d5\u8ca9\u58f2\u6a5f\uff08\u3058\u3069\u3046\u306f\u3093\u3070\u3044\u304d\uff09 \u30ed\u30d3\u30fc \u30d5\u30e9\u30f3\u30b9 \u30cd\u30af\u30bf\u30a4 \u968e\u6bb5\uff08\u304b\u3044==\u3060==\u3093\uff09 \u96fb\u8a71 \u90e8\u5c4b\uff08\u3078\u3084\uff09 \u30d0\u30f3\u30b3\u30af\uff11 \u30d0\u30eb\u30ea\u30f3\uff10 \u30b9\u30a4\u30b9\uff11 \u58f2\u308a\u5834\uff08\u3046\u308a\u3070\uff09\uff10 ## \u6587\u6cd5 - \u3053\u3053\u30fb\u305d\u3053\u30fb\u3042\u305d\u3053\u30fb\u3069\u3053 - \u3053\u3061\u3089\u30fb\u305d\u3061\u3089\u30fb\u3042\u3061\u3089\u30fb\u3069\u3061\u3089 - \u3053\u3053\u306f\u3000\u30db\u30c6\u30eb\u3067\u3059\u3002 - \u3042\u305d\u3053\u306f\u3000\u98df\u5802\u3067\u3059\u3002 - \u75c5\u9662\u306f\u3000\u3069\u3053\u3067\u3059\u304b\u3002 - \u3053\u3061\u3089\u306f\u3000\u6559\u5ba4\u3067\u3059\u3002 - \u3053\u308c\u306f\u3000\u3044\u304f\u3089\u3067\u3059\u304b\u3002 ![[Pasted image 20250611170643.png]]"},{"location":"%E6%97%A5%E6%9C%AC%E8%AA%9E/%E6%97%A5%E8%AF%AD%E5%A4%8D%E4%B9%A0/#_7","title":"\u7b2c\u56db\u8bfe","text":""},{"location":"%E6%97%A5%E6%9C%AC%E8%AA%9E/%E6%97%A5%E8%AF%AD%E5%A4%8D%E4%B9%A0/#_8","title":"\u5358\u8a9e","text":"\u65e5\u672c\u8a9e \u4e2d\u56fd\u8a9e \u4eca\uff08\u3044\u307e\uff09 \u4e94\u5206\uff08\u3054\u3075\u3093\uff09 \u5341\u5206\uff08\u3058\u3085\u3063\u3077\u3093\uff09 \u4f55\u5206\uff08\u306a\u3093\u3077\u3093\uff09 \u56db\u6642\uff08\u3088\u3058\uff09 \u4e03\u6642\uff08\u3057\u3061\u3058\uff09 \u4e5d\u6642\uff08\u304f\u3058\uff09 \u8d77\u304d\u308b \u52c9\u5f37\u3059\u308b \u4f55\u6642 \u4f11\u307f \u6bce\u6669\uff08\u307e\u3044\u3070\u3093\uff09 \u5bdd\u308b\uff08\u306d\u308b\uff09 \u6bce\u65e5\uff08\u307e\u3044\u306b\u3061\uff09 \u5348\u5f8c\uff08\u3054\u3054\uff09 \u756a\u53f7\uff08\u3070\u3093==\u3054==\u3046\uff09 \u4f55\u756a\uff08\u306a\u3093\u3070\u3093\uff09 \u50cd\u304f\uff08\u306f\u305f\u3089\u304f\uff09 \u660e\u65e5\uff08\u3042\u3057\u305f\uff09 \u4e00\u6628\u65e5\uff08\u304a\u3068\u3068\u3044\uff09 \u30da\u30ad\u30f3 \u30ed\u30f3\u30c9\u30f3 \u30ed\u30b5\u30f3\u30bc==\u30eb==\u30b9 \u4eca\u65e5\uff08\u304d\u3087\u3046\uff09 \u4f1a\u8b70 \u8a66\u9a13\uff08\u3057\u3051\u3093\uff09 \u3086\u3046==\u3073==\u3093\u304d\u3087\u304f \u56f3\u66f8\u9928\uff08\u3068\u3057\u3087\u304b\u3093\uff09 \u4f11\u3080 \u6669 \u660e\u5f8c\u65e5\uff08\u3042\u3055\u3063\u3066\uff09\uff12 \u4eca\u671d \u7d42\u308f\u308b \u6620\u753b\uff08\u3048\u3044\u304c\uff09 \u5927\u5909\u3067\u3059\u306d\u3002\uff08==\u305f==\u3044\u3078\u3093\u3067\u3059\u306d\uff09 \u30c7\u30d1\u30fc\u30c8 \u7f8e\u8853\u9928\uff08\u3073\u3058\u3085\u3064\u304b\u3093\uff09"},{"location":"%E6%97%A5%E6%9C%AC%E8%AA%9E/%E6%97%A5%E8%AF%AD%E5%A4%8D%E4%B9%A0/#_9","title":"\u6587\u6cd5","text":"<ul> <li>\uff5e\u306f\u3000X\u304b\u3089Y\u307e\u3067\u3000\u3067\u3059</li> <li>\u6642\u9593<ul> <li>\u3044\u3061\u3058\u3001\u306b\u3058\u3001\u3055\u3093\u3058\u3001==\u3088\u3058==\u3001\u3054\u3058\u3001\u308d\u304f\u3058\u3001==\u3057\u3061\u3058==\u3001\u306f\u3061\u3058\u3001==\u304f\u3058==\u3001\u3058\u3085==\u3046==\u3058\u3001\u3058\u3085\u3046\u3044\u3061\u3058\u3001\u3058\u3085\u3046\u306b\u3058</li> <li>\u3044==\u3063==\u3077\u3093\u3001\u306b\u3075\u3093\u3001\u3055\u3093\u3077\u3093\u3001\u3088\u3093\u3077\u3093\u3001\u3001\u3054\u3075\u3093\u3001\u308d==\u3063==\u3077\u3093\u3001\u306a\u306a\u3075\u3093\u3001\u306f\u3063\u3077\u3093\u3001\u304d\u3085\u3046\u3075\u3093\u3001\u3058\u3085\u3063\u3077\u3093\u3001\u3058\u3085\u3046\u3054\u3075\u3093\u3001\u306b\u3058\u3085\u3063\u3077\u3093</li> <li>12:55\u3000\u4e00\u6642\u4e94\u5206\u524d\uff08\u3044\u3061\u3058\u3054\u3075\u3093\u307e\u3048\uff09\u3000\u5341\u4e8c\u6642\u4e94\u5341\u4e94\u5206\uff08\u3058\u3085\u3046\u306b\u3058\u3054\u3058\u3085\u3046\u3054\u3075\u3093\uff09</li> <li>\u4f55\u66dc\u65e5</li> </ul> </li> <li>\u52d5\u8a5e\uff08\u3069\u3046\u3057\uff09<ul> <li>1\u7c7b\u52a8\u8bcd<ul> <li>\u5355\u8bcd\u6700\u540e\u662f\u3046\u6bb5\u9664\u308b\u4ee5\u5916\u7684</li> <li>\u5355\u8bcd\u6700\u540e\u662f\u308b\u4f46\u662f\u5012\u6570\u7b2c\u4e8c\u4e2a\u662f\u3042\u30fb\u3046\u30fb\u304a\uff08\u5b9e\u9645\u4e0a\u6709\u522b\u7684\u7279\u4f8b\uff09</li> <li>\u8fde\u7528\u5f62\u53d8\u5316\uff1a\u6700\u540e\u4e00\u4e2a\u5047\u540d\u53d8\u4e3a\u30a4\u6bb5+\u307e\u3059</li> </ul> </li> <li>2\u7c7b\u52a8\u8bcd<ul> <li>\u6700\u540e\u4e00\u4e2a\u5047\u540d\u662f\u308b\uff0c\u5012\u6570\u7b2c\u4e8c\u4e2a\u662f\u3044\u30fb\u3048\u6bb5</li> <li>\u8fde\u7528\u5f62\u53d8\u5316\uff1a\u53bb\u308b\u52a0\u307e\u3059</li> </ul> </li> <li>3\u7c7b\u52a8\u8bcd<ul> <li>\u30b5\u53d8\u52a8\u8bcd\uff08XX\u3059\u308b\uff09\uff1a\u53bb\u3059\u308b\u52a0\u307e\u3059</li> <li>\u30ab\u53d8\u52a8\u8bcd\uff1a\u304f\u308b-&gt;\u304d\u307e\u3059</li> </ul> </li> </ul> </li> <li>\u656c\u4f53\u52a9\u52a8\u8bcd\u307e\u3059\u3000\u524d\u63a5\u52a8\u8bcd\u8fde\u7528\u5f62</li> </ul> \u80af\u5b9a \u5426\u5b9a \u73b0\u5728\u672a\u6765 \u307e\u3059 \u307e\u305b\u3093 \u8fc7\u53bb \u307e\u3057\u305f \u307e\u305b\u3093\u3067\u3057\u305f - \u306b - \u6bce\u65e5\u4e03\u6642\u306b\u8d77\u304d\u308b\u3002 - \u4e00\u7c7b\u65f6\u95f4\u70b9\u6bd4\u5982\uff1a\u6765\u9031\u3001\u4eca\u65e5\u3001\u660e\u65e5\u3001\u4eca\u3001\u6628\u65e5\u3001\u5148\u9031\u3001\u53bb\u5e74\u3001\u6765\u5e74\u3001\u6bce\u65e5\u3001\u6bce\u9031\u3001\u6bce\u5e74  \u4e0d\u53ef\u4ee5\u52a0\u306b - \u4f55\u66dc\u65e5\u3001\u4f55\u6642\uff0c \u5176\u4ed6\u5177\u4f53\u65f6\u95f4\u70b9\u4e0e\u661f\u671f\u51e0  \u90fd\u53ef\u4ee5\u52a0\u306b \u6709\u4e9b\u662f\u5fc5\u987b\u7684\u6709\u4e9b\u662f\u53ef\u9009\u7684 - \u304b\u3089 - \u671d\u516b\u6642\u304b\u3089\u3000\u59cb\u307e\u308a\u307e\u3059\u3002 - \u4f1a\u793e\u306f\u3000\u4e5d\u6642\u304b\u3089\u3067\u3059\u3002 - \u307e\u3067 - \u4eca\u65e5\u306f\u3000\u591c\u516b\u6642(\u306f\u3061\u3058)\u307e\u3067\u3000\u56f3\u66f8\u9928\u306b\u3000\u3044\u307e\u3059\u3002 \u4eca\u5929\u5728\u56fe\u4e66\u9986\u5446\u5230\u4e86\u516b\u70b9\u3002 - \u30c7\u30d1\u30fc\u30c8\u306f\u3000\u5348\u524d\uff08\u3054\u305c\u3093\uff09\u5341\u6642\u304b\u3089\u3000\u591c\u5341\u6642\u307e\u3067\u3067\u3059\u3002 - \u3068\u3000\u548c"},{"location":"%E6%97%A5%E6%9C%AC%E8%AA%9E/%E6%97%A5%E8%AF%AD%E5%A4%8D%E4%B9%A0/#_10","title":"\u7b2c\u4e94\u8bfe","text":""},{"location":"%E6%97%A5%E6%9C%AC%E8%AA%9E/%E6%97%A5%E8%AF%AD%E5%A4%8D%E4%B9%A0/#_11","title":"\u5358\u8a9e","text":"\u65e5\u672c\u8a9e \u4e2d\u56fd\u8a9e \u884c\u304f \u5e30\u308b \u4f86\u308b \u81ea\u8ee2\u8eca \u6b69\u3044\u3066\uff08\u3042\u308b\u3044\u3066\uff09\u300c\u6b69\u304f\u7684\u3066\u5f62\u300d \u8d70\u8def \u8239\uff08\u3075\u306d\uff09 \u98db\u884c\u6a5f\uff08\u3072\u3053\u3046\u304d\uff09 \u96fb\u8eca \u65b0\u5e79\u7dda \u666e\u901a \u6025\u884c \u7279\u6025\uff08\u3068\u3063\u304d\u3085\u3046\uff09 \u30d0\u30b9 \u30bf\u30af\u30b7\u30fc \u30b9\u30fc\u30d1\u30fc \u99c5 \u5b66\u6821(\u304c==\u3063==\u3053\u3046\uff09 \u4eba \u53cb\u9054 \u5f7c\uff08\u304b\u308c\uff09 \u5f7c\u5973\uff08\u304b\u306e\u3058\u3087\uff09 \u5bb6\u65cf\uff08\u304b==\u305e==\u304f) \u5148\u30fb\u6765\u30fb\u4eca\u3000\uff0b\u3000\u9031\uff08\u3057\u3085\u3046\uff09\u30fb\u6708\uff08\u3052\u3064\uff09 \u53bb\u5e74\u30fb\u6765\u5e74\u30fb\u4eca\u5e74\uff08\u3053\u3068\u3057\uff09 \uff5e\u5e74 \uff5e\u6708\uff08\u304c\u3064\uff09 \u3044\u3064 \u4ec0\u4e48\u65f6\u5019 \u8a95\u751f\u65e5 \u3088\u3063\u304c \u3088\u3046\u304c \uff5e\u756a\u7dda \u3072\u3068\u308a\u3067 ![[Pasted image 20250611155100.png]]"},{"location":"%E6%97%A5%E6%9C%AC%E8%AA%9E/%E6%97%A5%E8%AF%AD%E5%A4%8D%E4%B9%A0/#_12","title":"\u6587\u6cd5","text":"<ul> <li>\u3078\u3000\u300c\u3048\u300d\u4f53\u8a00\u540e\uff0c\u8868\u793a\u79fb\u52a8\u7684\u65b9\u5411<ul> <li>\u99c5\u3078\u3000\u884c\u304f\u3002</li> </ul> </li> <li>\u3068\u3000\u4f53\u8a00\u540e\uff0c\u8868\u793a\u884c\u4e3a\u7684\u5171\u540c\u8005<ul> <li>\u9759\u9999\u3061\u3083\u3093\u3068\u3000\u4e00\u7dd2\u306b\u3000\u884c\u304d\u307e\u3059\u3002</li> </ul> </li> <li>\u3067\u3000\u8868\u793a\u624b\u6bb5\uff0c\u65b9\u5f0f\u6216\u65b9\u6cd5 \u76f8\u5f53\u4e8eby\uff1f<ul> <li>\u81ea\u8ee2\u8eca\u3067\u3000\u5b66\u6821\u3078\u3000\u884c\u304f\u3002</li> </ul> </li> <li>\u304b\u3089\u3000\u7a7a\u95f4\u4e0a\u7684\u8d77\u70b9<ul> <li>\u79c1\u306f\u3000\u3061\u3085\u3046\u3054\u304b\u3089\u3000\u6765\u307e\u3057\u305f\u3002</li> <li>\u4f11\u307f\u306e\u65e5\uff08\u3072\uff09\u306b\u306f\u3000\u5bb6\u304b\u3089\u3000\u51fa\u307e\u305b\u3093\u3002</li> </ul> </li> <li>\u3044\u3064<ul> <li>\u3044\u3064\u3000\u56fd\u3078\u3000\u5e30\u308a\u307e\u3059\u3002</li> </ul> </li> <li>\u7591\u554f\u8a5e\uff0b\u3082\uff5e\u307e\u305b\u3093<ul> <li>\u3069\u3053\u3082\u884c\u304d\u307e\u305b\u3093\u3002</li> </ul> </li> </ul>"},{"location":"%E6%97%A5%E6%9C%AC%E8%AA%9E/%E6%97%A5%E8%AF%AD%E5%A4%8D%E4%B9%A0/#_13","title":"\u7b2c\u516d\u8bfe","text":""},{"location":"%E6%97%A5%E6%9C%AC%E8%AA%9E/%E6%97%A5%E8%AF%AD%E5%A4%8D%E4%B9%A0/#_14","title":"\u5358\u8a9e","text":"\u65e5\u672c\u8a9e \u4e2d\u56fd\u8a9e \u5438\u3046 \u4f1a\u3046\uff08\u3042\u3046\uff09\uff11 \u8cb7\u3046 \u805e\u304f\uff08\u304d\u304f\uff09 \u66f8\u304f\uff08==\u304b==\u304f\uff09\uff11 \u98f2\u3080 \u8aad\u3080\uff08\u3088\u3080\uff09 \u64ae\u308b\uff08\u3068\u308b\uff09 \u898b\u308b\u30fb\u898b\u307e\u3059 \u98df\u3079\u308b \u3059\u308b\u30fb\u3057\u307e\u3059 \u30d1\u30f3 \u5375 \u8089\uff08\u306b\u304f\uff09 \u9b5a \u91ce\u83dc \u679c\u7269\uff08\u304f==\u3060==\u3082\u306e\uff09 \u6c34\uff08\u307f\u305a\uff09 \u304a\u8336 \u7d05\u8336\uff08==\u3053==\u3046\u3061\u3083\uff09 \u725b\u4e73 \u30b8\u30e5\u30fc\u30b9 \u30d3\u30fc\u30eb \u304a\u9152 \u7159\u8349\uff08\u305f\u3070==\u3053==\uff09\uff10 \u624b\u7d19\uff08\u3066\u304c\u307f\uff09 \u30ec\u30dd\u30fc\u30c8 \u5199\u771f \u30d3\u30c7\u30aa \u5e97\uff08\u307f\u305b\uff09\uff12 \u5ead\uff08\u306b\u308f\uff09\uff10 \u5bbf\u984c\uff08\u3057==\u3085==\u304f==\u3060==\u3044\uff09 \u30c6\u30cb\u30b9 \u30b5\u30c3\u30ab\u30fc \u304a\u82b1\u898b \u6642\u3005\uff08\u3068==\u304d\u3069==\u304d\uff09 \u5206\u304b\u308a\u307e\u3057\u305f\u3002 ## \u6587\u6cd5 - \u81ea\u52a8\u8bcd\u4e0e\u4ed6\u52a8\u8bcd - \u81ea\u52a8\u8bcd\u662f\u4e1c\u897f\u81ea\u5df1\u52a8 - \u4ed6\u52a8\u8bcd\u662fA\u8ba9B\u52a8 \u7528\u3092 - \u3092\u3000\u63a5\u5728\u4f53\u8a00\u540e\uff0c\u8868\u793a\u4ed6\u52a8\u8bcd\u7684\u4f5c\u7528\u5bf9\u8c61 - \u304a\u9152\u3092\u98f2\u307f\u307e\u3059\u3002 - \u65b0\u805e\u3092\u8aad\u3080\u3002 - \u306a\u306b\uff08\u4f55\uff09\u3092\u3057\u307e\u3059\u304b\u3002 - \u4f7f\u7528\u306a\u3093\u7684\u60c5\u51b5 - \u540e\u9762\u662f\u305f\u30fb\u3060\u30fb\u306a\u884c - \u540e\u9762\u6709\u5177\u4f53\u91cf\u8bcd - \u4f55\u6b73\u30fb\u4f55\u5e74 - \u4f7f\u7528\u306a\u306b\u7684\u60c5\u51b5 - \u5176\u4ed6\u65f6\u5019 - \u7279\u522b\u5730\uff0c\u306a\u306b\u3067\u53ef\u4ee5\u660e\u786e\u8868\u793a\u5728\u8be2\u95ee\u624b\u6bb5\u65b9\u6cd5\uff0c\u800c\u306a\u3093\u3067\u53ef\u4ee5\u8be2\u95ee\u624b\u6bb5\u3001\u65b9\u6cd5\u4e0e\u7406\u7531 - \u3067\u3000\u63a5\u5728\u4f53\u8a00\u540e\uff0c\u8868\u793a\u5730\u70b9 \u76f8\u5f53\u4e8eat - \u99c5\u3067\u3000\u4f1a\u3046\u3002 - \u6559\u5ba4\u3067\u3000\u52c9\u5f37\uff08\u3079\u3093\u304d\u3087\u3046\uff09\u3059\u308b\u3002 - \u56f3\u66f8\u9928\u3067\u3000\u672c\u3092\u8aad\u3080\u3002 - \uff5e\u307e\u3057\u3087\u3046 - \uff5e\u307e\u305b\u3093\u304c - \u3044\u3064\u3082 - \u3068\u304d\u3069\u304d - \u305d\u308c\u304b\u3089 -"}]}